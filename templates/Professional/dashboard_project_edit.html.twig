{% extends 'layouts/UserDashboard_layout.html.twig' %}
{% form_theme form 'bootstrap_5_horizontal_layout.html.twig' %}

{% block content %}
    {% include 'Professional/dashboard_navigation.html.twig' %}

    <div class="dashboard-container">
        <div class="left-column" style="width: 100%; justify-content:center;">
            <div class="projectssection">
                <div class="sectionheading">
                    <h2>Edit Project</h2> 
                </div>
                
                {% if profileType != 'Builder' %}
                    <div class="editform" style="padding:0px 20px">
                        {{ form_start(form) }}
                        <input type="hidden" name="deleted_images" id="deleted-images" value="">

                        <input type="hidden" name="deleted_videos" id="deleted-videos" value="">
                        
                        <div class="Projectdetails">
                            <div class="form-group form-field ProjectGallery">
                                <label for="professional_add_project_form_ProjectGallery" class="form-label required">Project Pictures</label>
                                <div class="image-upload-container">
                                    <div class="upload-area" id="dropzone">
                                        <div class="upload-icon">
                                            <i class="fas fa-cloud-upload-alt"></i>
                                        </div>
                                        <div class="upload-text">
                                            <span class="drag-text">Drag & drop images/videos here or</span>
                                            <button type="button" class="btn btn-primary btn-sm" id="browse-btn">Browse Files</button>
                                            {{ form_widget(form.ProjectGallery, {'attr': {
                                                'class': 'image-input',
                                                'style': 'display: none;'
                                            }}) }}
                                        </div>
                                    </div>
                                    <div class="image-preview-container" id="image-preview-container">
                                        {% for image in existingImages %}
                                            <div class="preview-item existing-item" data-id="{{ image.id }}">
                                                <img src="{{ image.thumbnail }}" class="preview-image" alt="Existing image">
                                                <div class="media-type-badge">Image</div>
                                                <button type="button" class="remove-btn" onclick="removeExistingImage({{ image.id }})">&times;</button>
                                            </div>
                                        {% endfor %}
                                        {% for video in existingVideos %}
                                            <div class="preview-item existing-item" data-path="{{ video }}">
                                                <div class="video-preview">
                                                    <video controls style="width: 100%; height: 100%; object-fit: cover;">
                                                        <source src="{{ video }}" type="video/mp4">
                                                        <source src="{{ video }}" type="video/webm">
                                                        <source src="{{ video }}" type="video/ogg">
                                                        Your browser does not support the video tag.
                                                    </video>
                                                    <div class="media-type-badge">Video</div>
                                                </div>
                                                <button type="button" class="remove-btn" onclick="removeExistingVideo('{{ video }}')">&times;</button>
                                            </div>
                                        {% endfor %}
                                    </div>
                                    <div class="upload-status">
                                        <span id="file-count">{{ existingImages|length + existingVideos|length }} files selected</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="FormRow1">
                                <div class="form-field ProjectTitle">
                                    {{ form_row(form.ProjectName) }}
                                </div>
                                <div class="form-field ProjectLocation">
                                    {{ form_row(form.Location) }}
                                </div>
                            </div>
                            
                            <div class="form-field ProjectDescription">
                                {{ form_row(form.ProjectDescription) }}
                            </div>
                            
                            <div class="FormRow2">
                                <div class="form-field ProjectValue">
                                    {{ form_row(form.MinPrice) }}
                                </div>
                                <div class="form-field ProjectSpecs">
                                    {{ form_row(form.Configuration) }}
                                </div>
                            </div>
                            
                            <div class="form-field ProjectCollab">
                                {{ form_row(form.Collaborations) }}
                            </div>
                            
                            <div class="form-field ProjectSubmitBtn">
                                {{ form_row(form._submit) }}
                            </div>
                        </div>
                        {{ form_end(form) }}
                    </div>
                {% else %}
                    <!-- Builder Edit Form -->
                    <div class="editform" style="padding:0px 20px">
                        {{ form_start(form) }}
                        <input type="hidden" name="deleted_images" id="deleted-images" value="">
                        <input type="hidden" name="deleted_videos" id="deleted-videos" value="">
                        
                        <div class="Projectdetails">
                            <!-- Project Title -->
                            <div class="form-field ProjectTitle">
                                {{ form_row(form.ProjectName, {'label_attr': {'class': 'required'}}) }}
                            </div>
                            
                            <!-- Project Type (Builder specific) -->
                            <div class="form-field ProjectCategory">
                                {{ form_row(form.ProjectCategory) }}
                            </div>
                            
                            <!-- Project Description -->
                            <div class="form-field ProjectDescription">
                                {{ form_row(form.ProjectDescription, {'label_attr': {'class': 'required'}}) }}
                            </div>
                            
                            <!-- Project Gallery -->
                            <div class="form-group form-field ProjectGallery">
                                <label for="builder_edit_project_form_ProjectGallery" class="form-label required">Project Pictures</label>
                                <div class="image-upload-container">
                                    <div class="upload-area" id="dropzone">
                                        <div class="upload-icon">
                                            <i class="fas fa-cloud-upload-alt"></i>
                                        </div>
                                        <div class="upload-text">
                                            <span class="drag-text">Drag & drop images/videos here or</span>
                                            <button type="button" class="btn btn-primary btn-sm" id="browse-btn">Browse Files</button>
                                            {{ form_widget(form.ProjectGallery, {'attr': {
                                                'class': 'image-input',
                                                'style': 'display: none;'
                                            }}) }}
                                        </div>
                                    </div>
                                    <div class="image-preview-container" id="image-preview-container">
                                        {% for image in existingImages %}
                                            <div class="preview-item existing-item" data-id="{{ image.id }}">
                                                <img src="{{ image.thumbnail }}" class="preview-image" alt="Existing image">
                                                <div class="media-type-badge">Image</div>
                                                <button type="button" class="remove-btn" onclick="removeExistingImage({{ image.id }})">&times;</button>
                                            </div>
                                        {% endfor %}
                                        {% for video in existingVideos %}
                                            <div class="preview-item existing-item" data-path="{{ video }}">
                                                <div class="video-preview">
                                                    <video controls style="width: 100%; height: 100%; object-fit: cover;">
                                                        <source src="{{ video }}" type="video/mp4">
                                                        <source src="{{ video }}" type="video/webm">
                                                        <source src="{{ video }}" type="video/ogg">
                                                        Your browser does not support the video tag.
                                                    </video>
                                                    <div class="media-type-badge">Video</div>
                                                </div>
                                                <button type="button" class="remove-btn" onclick="removeExistingVideo('{{ video }}')">&times;</button>
                                            </div>
                                        {% endfor %}
                                    </div>
                                    <div class="upload-status">
                                        <span id="file-count">{{ existingImages|length + existingVideos|length }} files selected</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Floor Maps (Builder specific) -->
                            <div class="form-group form-field ProjectFloorMaps">
                                <label for="builder_edit_project_form_FloorMaps" class="form-label">Floor Maps</label>
                                <div class="image-upload-container">
                                    <div class="upload-area" id="floor-maps-dropzone">
                                        <div class="upload-icon">
                                            <i class="fas fa-cloud-upload-alt"></i>
                                        </div>
                                        <div class="upload-text">
                                            <span class="drag-text">Drag & drop floor maps here or</span>
                                            <button type="button" class="btn btn-primary btn-sm" id="floor-maps-browse-btn">Browse Files</button>
                                            {{ form_widget(form.FloorMaps, {'attr': {
                                                'class': 'floor-maps-input',
                                                'style': 'display: none;'
                                            }}) }}
                                        </div>
                                    </div>
                                    <div class="image-preview-container" id="floor-maps-preview-container">
                                        {% for floorMap in existingFloorMaps %}
                                            <div class="preview-item existing-item" data-id="{{ floorMap.id }}">
                                                <img src="{{ floorMap.thumbnail }}" class="preview-image" alt="Existing floor map">
                                                <div class="media-type-badge">Floor Map</div>
                                                <button type="button" class="remove-btn" onclick="removeExistingFloorMap({{ floorMap.id }})">&times;</button>
                                            </div>
                                        {% endfor %}
                                        {% for video in existingFloorMapVideos %}
                                            <div class="preview-item existing-item" data-path="{{ video }}">
                                                <div class="video-preview">
                                                    <video controls style="width: 100%; height: 100%; object-fit: cover;">
                                                        <source src="{{ video }}" type="video/mp4">
                                                        <source src="{{ video }}" type="video/webm">
                                                        <source src="{{ video }}" type="video/ogg">
                                                        Your browser does not support the video tag.
                                                    </video>
                                                    <div class="media-type-badge">Floor Map Video</div>
                                                </div>
                                                <button type="button" class="remove-btn" onclick="removeExistingFloorMapVideo('{{ video }}')">&times;</button>
                                            </div>
                                        {% endfor %}
                                    </div>
                                    <div class="upload-status">
                                        <span id="floor-maps-file-count">{{ existingFloorMaps|length + existingFloorMapVideos|length }} files selected</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Location -->
                            <div class="form-field ProjectLocation">
                                {{ form_row(form.Location) }}
                            </div>
                            
                            <!-- RERA Approval (Builder specific) -->
                            <div class="form-field ReraApproval">
                                {{ form_row(form.ReraApproval) }}
                            </div>
                            
                            <!-- Project Value -->
                            <div class="form-field ProjectValue">
                                {{ form_row(form.MinPrice) }}
                            </div>
                            
                            <!-- Project Specification (Builder specific) -->
                            <div class="form-field ProjectSpecs">
                                {{ form_row(form.Configuration) }}
                            </div>
                            
                            <!-- Possession Starts (Builder specific) -->
                            <div class="form-field PossessionStarts">
                                {{ form_row(form.PossessionStarts, {'label_attr': {'class': 'optional'}}) }}
                            </div>
                            
                            <!-- Collaborations & Credits (Builder specific) -->
                            <div class="form-field ProjectCollab">
                                {{ form_row(form.Collaborations) }}
                            </div>
                            
                            <!-- Submit Button -->
                            <div class="form-field ProjectSubmitBtn">
                                {{ form_row(form._submit) }}
                            </div>
                        </div>
                        {{ form_end(form) }}
                    </div>
                {% endif %}
            </div> 
        </div>
    </div>

    <style>
        /* Custom styling for dropdown fields to match add project form */
        #builder_edit_project_form_Location,
        #builder_edit_project_form_ProjectCategory,
        #builder_edit_project_form_MinPrice {
            width: 100%;
            height: 41px;
            font-size: 15px;
            padding: 0px 10px;
            border: 1.5px solid #979797;
            border-radius: 5px;
            background-color: white;
        }
        
        #builder_edit_project_form_Location:focus,
        #builder_edit_project_form_ProjectCategory:focus,
        #builder_edit_project_form_MinPrice:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        /* Field indicators for required and optional fields */
        .form-label.required::after {
            content: " *";
            color: #dc3545;
            font-weight: bold;
        }
        
        .form-label.optional::after {
            content: " (Optional)";
            color: #6c757d;
            font-weight: normal;
            font-size: 0.9em;
        }
        
        .image-upload-container {
            margin-bottom: 20px;
        }
        
        .upload-area {
            border: 2px dashed #ccc;
            border-radius: 5px;
            padding: 30px;
            text-align: center;
            transition: all 0.3s;
            margin-bottom: 15px;
        }
        
        .upload-area:hover, .upload-area.dragover {
            border-color: #007bff;
            background-color: #f8f9fa;
        }
        
        .upload-icon {
            font-size: 50px;
            color: #6c757d;
            margin-bottom: 15px;
        }
        
        .drag-text {
            display: block;
            margin-bottom: 10px;
        }
        
        .image-preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }
        
        .preview-item {
            position: relative;
            width: 120px;
            height: 120px;
            border-radius: 5px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .preview-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            width: 25px;
            height: 25px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0.8;
            transition: opacity 0.3s;
        }
        
        .preview-item:hover .remove-btn {
            opacity: 1;
        }
        
        .upload-status {
            font-size: 14px;
            color: #6c757d;
        }
        
        .video-preview {
            position: relative;
            width: 100%;
            height: 100%;
            border-radius: 5px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .video-preview i {
            font-size: 30px;
            color: #555;
        }
        
        .video-preview video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .media-type-badge {
            position: absolute;
            bottom: 5px;
            right: 5px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 2px 5px;
            border-radius: 3px;
            font-size: 10px;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.querySelector('.image-input');
            fileInput.setAttribute('accept', 'image/*,video/*');
            const browseBtn = document.getElementById('browse-btn');
            const previewContainer = document.getElementById('image-preview-container');
            const fileCount = document.getElementById('file-count');
            const form = document.querySelector('form');
            const deletedImagesInput = document.getElementById('deleted-images');
            
            let files = [];
            let deletedImages = [];
            let deletedVideos = [];
            
            // Handle drag and drop events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropzone.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropzone.classList.add('dragover');
            }
            
            function unhighlight() {
                dropzone.classList.remove('dragover');
            }
            
            // Handle dropped files
            dropzone.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const droppedFiles = dt.files;
                handleFiles(droppedFiles);
            }
            
            // Handle file input change
            fileInput.addEventListener('change', function() {
                handleFiles(this.files);
            });
            
            // Browse button click
            browseBtn.addEventListener('click', function() {
                fileInput.click();
            });
            
            // Handle selected files
            function handleFiles(selectedFiles) {
                for (let i = 0; i < selectedFiles.length; i++) {
                    files.push(selectedFiles[i]);
                }
                updateFileCount();
                renderPreviews();
                
                // Create a new DataTransfer object and set the files
                const dataTransfer = new DataTransfer();
                files.forEach(file => dataTransfer.items.add(file));
                fileInput.files = dataTransfer.files;
            }
            
            // Update file count display
            function updateFileCount() {
                const existingItems = document.querySelectorAll('.existing-item:not([style*="display: none"])');
                const count = files.length + existingItems.length;
                fileCount.textContent = count === 1 ? '1 file selected' : `${count} files selected`;
                
                // Debug logging
                console.log('File count update:', {
                    newFiles: files.length,
                    existingItems: existingItems.length,
                    totalCount: count,
                    deletedImages: deletedImages.length,
                    deletedVideos: deletedVideos.length
                });
            }
            
            // Render previews
            function renderPreviews() {
                // Clear only new file previews, keep existing ones
                const newPreviews = document.querySelectorAll('.preview-item:not(.existing-item)');
                newPreviews.forEach(preview => preview.remove());
                
                files.forEach((file, index) => {
                    const reader = new FileReader();
                    
                    if (file.type.match('image.*')) {
                        // Handle image preview
                        reader.onload = function(e) {
                            const previewItem = document.createElement('div');
                            previewItem.className = 'preview-item';
                            
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.className = 'preview-image';
                            
                            const mediaBadge = document.createElement('div');
                            mediaBadge.className = 'media-type-badge';
                            mediaBadge.textContent = 'Image';
                            
                            const removeBtn = document.createElement('button');
                            removeBtn.className = 'remove-btn';
                            removeBtn.innerHTML = '&times;';
                            removeBtn.addEventListener('click', () => removeFile(index));
                            
                            previewItem.appendChild(img);
                            previewItem.appendChild(mediaBadge);
                            previewItem.appendChild(removeBtn);
                            previewContainer.appendChild(previewItem);
                        };
                        
                        reader.readAsDataURL(file);
                    } 
                    else if (file.type.match('video.*')) {
                        // Handle video preview
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const previewItem = document.createElement('div');
                            previewItem.className = 'preview-item';
                            
                            const videoPreview = document.createElement('div');
                            videoPreview.className = 'video-preview';
                            
                            const video = document.createElement('video');
                            video.src = e.target.result;
                            video.controls = true;
                            video.style.width = '100%';
                            video.style.height = '100%';
                            video.style.objectFit = 'cover';
                            
                            const mediaBadge = document.createElement('div');
                            mediaBadge.className = 'media-type-badge';
                            mediaBadge.textContent = 'Video';
                            
                            const removeBtn = document.createElement('button');
                            removeBtn.className = 'remove-btn';
                            removeBtn.innerHTML = '&times;';
                            removeBtn.addEventListener('click', () => removeFile(index));
                            
                            videoPreview.appendChild(video);
                            previewItem.appendChild(videoPreview);
                            previewItem.appendChild(mediaBadge);
                            previewItem.appendChild(removeBtn);
                            previewContainer.appendChild(previewItem);
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
            
            // Remove file from selection
            function removeFile(index) {
                files.splice(index, 1);
                updateFileCount();
                renderPreviews();
                
                // Update the file input
                const dataTransfer = new DataTransfer();
                files.forEach(file => dataTransfer.items.add(file));
                fileInput.files = dataTransfer.files;
            }
            
            // Remove existing image
            window.removeExistingImage = function(imageId) {
                deletedImages.push(imageId);
                const item = document.querySelector(`.existing-item[data-id="${imageId}"]`);
                if (item) {
                    item.style.display = 'none';
                }
                deletedImagesInput.value = deletedImages.join(',');
                updateFileCount();
            }

            const deletedVideosInput = document.getElementById('deleted-videos');

            // Remove existing video
            window.removeExistingVideo = function(videoPath) {
                console.log('Removing video:', videoPath);
                deletedVideos.push(videoPath);
                const item = document.querySelector(`.existing-item[data-path="${videoPath}"]`);
                if (item) {
                    item.style.display = 'none';
                    console.log('Video item hidden');
                } else {
                    console.log('Video item not found');
                }
                deletedVideosInput.value = deletedVideos.join(',');
                console.log('Deleted videos:', deletedVideos);
                updateFileCount();
            }

            
            // Initial file count
            updateFileCount();
            
            // Add a periodic check to ensure file count is accurate
            setInterval(function() {
                const visibleExistingItems = document.querySelectorAll('.existing-item:not([style*="display: none"])');
                const expectedCount = files.length + visibleExistingItems.length;
                const currentCountText = fileCount.textContent;
                const currentCount = parseInt(currentCountText.match(/\d+/)[0]) || 0;
                
                if (expectedCount !== currentCount) {
                    console.log('File count mismatch detected, updating...');
                    updateFileCount();
                }
            }, 1000);
        });
    </script>
    
    <!-- Floor Maps JavaScript for Builders -->
    {% if profileType == 'Builder' %}
    <script>
    // Floor Maps functionality (for builders only) - COMPLETELY INDEPENDENT WITH FULL LOGGING
    (function() {
        'use strict';
        
        console.log('🔧 Floor Maps Script: Starting initialization...');
        
        // Wait for DOM to be ready
        if (document.readyState === 'loading') {
            console.log('🔧 Floor Maps Script: DOM still loading, waiting for DOMContentLoaded...');
            document.addEventListener('DOMContentLoaded', initFloorMaps);
        } else {
            console.log('🔧 Floor Maps Script: DOM already ready, initializing immediately...');
            initFloorMaps();
        }
        
        function initFloorMaps() {
            console.log('🔧 Floor Maps Script: initFloorMaps() called');
            
            // Check if Floor Maps elements exist (only for builders)
            console.log('🔧 Floor Maps Script: Looking for floor-maps-dropzone...');
            const floorMapsDropzone = document.getElementById('floor-maps-dropzone');
            console.log('🔧 Floor Maps Script: floorMapsDropzone =', floorMapsDropzone);
            
            if (!floorMapsDropzone) {
                console.log('❌ Floor Maps Script: floor-maps-dropzone not found - user is not a builder');
                return;
            }
            
            console.log('🔧 Floor Maps Script: Looking for other elements...');
            const floorMapsFileInput = document.getElementById('builder_edit_project_form_FloorMaps');
            const floorMapsBrowseBtn = document.getElementById('floor-maps-browse-btn');
            const floorMapsPreviewContainer = document.getElementById('floor-maps-preview-container');
            const floorMapsFileCount = document.getElementById('floor-maps-file-count');
            
            console.log('🔧 Floor Maps Script: All elements found:', {
                dropzone: floorMapsDropzone,
                fileInput: floorMapsFileInput,
                browseBtn: floorMapsBrowseBtn,
                previewContainer: floorMapsPreviewContainer,
                fileCount: floorMapsFileCount
            });
            
            console.log('🔧 Floor Maps Script: Elements exist check:', {
                dropzone: !!floorMapsDropzone,
                fileInput: !!floorMapsFileInput,
                browseBtn: !!floorMapsBrowseBtn,
                previewContainer: !!floorMapsPreviewContainer,
                fileCount: !!floorMapsFileCount
            });
            
            // Initialize Floor Maps functionality
            let floorMapsFiles = [];
            console.log('🔧 Floor Maps Script: floorMapsFiles array initialized');
            
            // Drag and drop functionality
            function setupDragAndDrop() {
                console.log('🔧 Floor Maps Script: setupDragAndDrop() called');
                if (!floorMapsDropzone) {
                    console.log('❌ Floor Maps Script: setupDragAndDrop() - dropzone not found');
                    return;
                }
                
                console.log('🔧 Floor Maps Script: Adding drag and drop event listeners...');
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    console.log('🔧 Floor Maps Script: Adding', eventName, 'listener');
                    floorMapsDropzone.addEventListener(eventName, preventDefaults, false);
                });
                
                ['dragenter', 'dragover'].forEach(eventName => {
                    console.log('🔧 Floor Maps Script: Adding', eventName, 'highlight listener');
                    floorMapsDropzone.addEventListener(eventName, highlightFloorMaps, false);
                });
                
                ['dragleave', 'drop'].forEach(eventName => {
                    console.log('🔧 Floor Maps Script: Adding', eventName, 'unhighlight listener');
                    floorMapsDropzone.addEventListener(eventName, unhighlightFloorMaps, false);
                });
                
                console.log('🔧 Floor Maps Script: Adding drop handler');
                floorMapsDropzone.addEventListener('drop', handleFloorMapsDrop, false);
                console.log('✅ Floor Maps Script: setupDragAndDrop() completed');
            }
            
            function preventDefaults(e) {
                console.log('🔧 Floor Maps Script: preventDefaults() called');
                e.preventDefault();
                e.stopPropagation();
            }
            
            function highlightFloorMaps() {
                console.log('🔧 Floor Maps Script: highlightFloorMaps() called');
                if (floorMapsDropzone) {
                    floorMapsDropzone.classList.add('dragover');
                    console.log('✅ Floor Maps Script: dragover class added');
                }
            }
            
            function unhighlightFloorMaps() {
                console.log('🔧 Floor Maps Script: unhighlightFloorMaps() called');
                if (floorMapsDropzone) {
                    floorMapsDropzone.classList.remove('dragover');
                    console.log('✅ Floor Maps Script: dragover class removed');
                }
            }
            
            function handleFloorMapsDrop(e) {
                console.log('🔧 Floor Maps Script: handleFloorMapsDrop() called');
                const dt = e.dataTransfer;
                const droppedFiles = dt.files;
                console.log('🔧 Floor Maps Script: Dropped files:', droppedFiles.length);
                handleFloorMapsFiles(droppedFiles);
            }
            
            // File input functionality
            function setupFileInput() {
                console.log('🔧 Floor Maps Script: setupFileInput() called');
                if (!floorMapsFileInput) {
                    console.log('❌ Floor Maps Script: setupFileInput() - fileInput not found');
                    return;
                }
                
                console.log('🔧 Floor Maps Script: Adding change event listener to file input');
                floorMapsFileInput.addEventListener('change', function() {
                    console.log('🔧 Floor Maps Script: File input change event triggered');
                    console.log('🔧 Floor Maps Script: Files selected:', this.files.length);
                    handleFloorMapsFiles(this.files);
                });
                console.log('✅ Floor Maps Script: setupFileInput() completed');
            }
            
            // Browse button functionality
            function setupBrowseButton() {
                console.log('🔧 Floor Maps Script: setupBrowseButton() called');
                if (!floorMapsBrowseBtn) {
                    console.log('❌ Floor Maps Script: setupBrowseButton() - browseBtn not found');
                    return;
                }
                if (!floorMapsFileInput) {
                    console.log('❌ Floor Maps Script: setupBrowseButton() - fileInput not found');
                    return;
                }
                
                console.log('🔧 Floor Maps Script: Adding click event listener to browse button');
                floorMapsBrowseBtn.addEventListener('click', function(e) {
                    console.log('🔧 Floor Maps Script: Browse button clicked!');
                    e.preventDefault();
                    console.log('🔧 Floor Maps Script: Calling fileInput.click()');
                    floorMapsFileInput.click();
                    console.log('✅ Floor Maps Script: fileInput.click() called');
                });
                console.log('✅ Floor Maps Script: setupBrowseButton() completed');
            }
            
            // File handling
            function handleFloorMapsFiles(files) {
                console.log('🔧 Floor Maps Script: handleFloorMapsFiles() called with', files.length, 'files');
                Array.from(files).forEach((file, index) => {
                    console.log('🔧 Floor Maps Script: Processing file', index + 1, ':', file.name, file.type);
                    if (file.type.startsWith('image/')) {
                        console.log('✅ Floor Maps Script: File is an image, adding to array');
                        floorMapsFiles.push(file);
                        displayFloorMapsPreview(file);
                    } else {
                        console.log('❌ Floor Maps Script: File is not an image, skipping');
                    }
                });
                updateFloorMapsFileCount();
                
                // Update the file input field with the selected files
                updateFloorMapsFileInput();
            }
            
            // Update the file input field with selected files
            function updateFloorMapsFileInput() {
                console.log('🔧 Floor Maps Script: updateFloorMapsFileInput() called');
                if (!floorMapsFileInput) {
                    console.log('❌ Floor Maps Script: updateFloorMapsFileInput() - fileInput not found');
                    return;
                }
                
                console.log('🔧 Floor Maps Script: Creating DataTransfer with', floorMapsFiles.length, 'files');
                const dataTransfer = new DataTransfer();
                floorMapsFiles.forEach(file => {
                    console.log('🔧 Floor Maps Script: Adding file to DataTransfer:', file.name);
                    dataTransfer.items.add(file);
                });
                
                floorMapsFileInput.files = dataTransfer.files;
                console.log('✅ Floor Maps Script: File input updated with', floorMapsFileInput.files.length, 'files');
            }
            
            function displayFloorMapsPreview(file) {
                console.log('🔧 Floor Maps Script: displayFloorMapsPreview() called for', file.name);
                if (!floorMapsPreviewContainer) {
                    console.log('❌ Floor Maps Script: displayFloorMapsPreview() - previewContainer not found');
                    return;
                }
                
                console.log('🔧 Floor Maps Script: Creating FileReader...');
                const reader = new FileReader();
                reader.onload = function(e) {
                    console.log('🔧 Floor Maps Script: FileReader onload triggered');
                    const preview = document.createElement('div');
                    preview.className = 'preview-item';
                    preview.innerHTML = `
                        <img src="${e.target.result}" alt="Floor Map Preview" class="preview-image">
                        <button type="button" class="remove-btn" onclick="removeFloorMapsPreview(this)">×</button>
                    `;
                    console.log('🔧 Floor Maps Script: Adding preview to container');
                    floorMapsPreviewContainer.appendChild(preview);
                    console.log('✅ Floor Maps Script: Preview added successfully');
                };
                console.log('🔧 Floor Maps Script: Starting FileReader.readAsDataURL()');
                reader.readAsDataURL(file);
            }
            
            function updateFloorMapsFileCount() {
                console.log('🔧 Floor Maps Script: updateFloorMapsFileCount() called');
                if (floorMapsFileCount) {
                    // Count visible existing items (not hidden)
                    const visibleExistingItems = document.querySelectorAll('.existing-item:not([style*="display: none"])');
                    const totalCount = floorMapsFiles.length + visibleExistingItems.length;
                    floorMapsFileCount.textContent = `${totalCount} files selected`;
                    console.log('✅ Floor Maps Script: File count updated to', totalCount, '(new:', floorMapsFiles.length, 'existing:', visibleExistingItems.length, ')');
                } else {
                    console.log('❌ Floor Maps Script: updateFloorMapsFileCount() - fileCount element not found');
                }
            }
            
            // Global remove function
            window.removeFloorMapsPreview = function(button) {
                console.log('🔧 Floor Maps Script: removeFloorMapsPreview() called');
                if (!floorMapsPreviewContainer) {
                    console.log('❌ Floor Maps Script: removeFloorMapsPreview() - previewContainer not found');
                    return;
                }
                
                const preview = button.parentElement;
                const index = Array.from(floorMapsPreviewContainer.children).indexOf(preview);
                console.log('🔧 Floor Maps Script: Removing preview at index', index);
                if (index > -1) {
                    floorMapsFiles.splice(index, 1);
                    preview.remove();
                    updateFloorMapsFileCount();
                    updateFloorMapsFileInput(); // Update the file input after removing files
                    console.log('✅ Floor Maps Script: Preview removed successfully');
                }
            };
            
            // Initialize all functionality
            console.log('🔧 Floor Maps Script: Starting initialization of all functions...');
            setupDragAndDrop();
            setupFileInput();
            setupBrowseButton();
            
            console.log('✅ Floor Maps Script: Floor Maps initialized successfully!');
        }
    })();
    
    // Global functions for removing existing Floor Maps
    window.removeExistingFloorMap = function(floorMapId) {
        console.log('🔧 Floor Maps Script: removeExistingFloorMap() called for ID:', floorMapId);
        const item = document.querySelector(`.existing-item[data-id="${floorMapId}"]`);
        if (item) {
            item.style.display = 'none';
            console.log('✅ Floor Maps Script: Existing floor map hidden');
        }
        updateFloorMapsFileCount();
    };
    
    window.removeExistingFloorMapVideo = function(videoPath) {
        console.log('🔧 Floor Maps Script: removeExistingFloorMapVideo() called for:', videoPath);
        const item = document.querySelector(`.existing-item[data-path="${videoPath}"]`);
        if (item) {
            item.style.display = 'none';
            console.log('✅ Floor Maps Script: Existing floor map video hidden');
        }
        updateFloorMapsFileCount();
    };
    </script>
    {% endif %}
{% endblock %}