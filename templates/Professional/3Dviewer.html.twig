<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Model Viewer with AR</title>
    <style>
        * {
            margin: 0;
            padding: 0;a
            box-sizing: border-box;
        }

        body {
            overflow: hidden;
            font-family: Arial, sans-serif;
            background: #1a1a2e;
        }

        #viewer {
            width: 100vw;
            height: 100vh;
        }

        .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            z-index: 1000;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            z-index: 1000;
        }

        .progress {
            width: 200px;
            height: 4px;
            background: rgba(255, 255, 255, 0.1);
            margin-top: 10px;
            border-radius: 2px;
        }

        .progress-bar {
            height: 100%;
            background: #4CAF50;
            width: 0%;
            transition: width 0.3s;
            border-radius: 2px;
        }

        .ar-overlay {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            z-index: 1000;
            display: none;
        }

        .ar-instructions {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <canvas id="viewer"></canvas>
    <div class="controls">
        <button class="btn" id="wireframeBtn">Toggle Wireframe</button>
        <button class="btn" id="arBtn" disabled>View in AR</button>
        <button class="btn" id="fullscreenBtn">Fullscreen</button>
    </div>
    <div class="loading">
        Loading Model...
        <div class="progress">
            <div class="progress-bar"></div>
        </div>
    </div>
    <div class="ar-overlay">
        <div class="ar-instructions">Tap on a surface to place the model</div>
    </div>

    <script type="importmap">
    {
        "imports": {
            "three": "https://unpkg.com/three@0.160.0/build/three.module.js",
            "three/addons/": "https://unpkg.com/three@0.160.0/examples/jsm/"
        }
    }
    </script>

    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { OBJLoader } from 'three/addons/loaders/OBJLoader.js';
        import { ARButton } from 'three/addons/webxr/ARButton.js';

        let scene, camera, renderer, controls;
        let model, reticle;
        let hitTestSource = null;
        let hitTestSourceRequested = false;
        let modelPlaced = false;

        // Initialize the scene
        async function init() {
            // Scene setup
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x1a1a2e);

            // Camera setup
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5;

            // Renderer setup
            renderer = new THREE.WebGLRenderer({
                canvas: document.querySelector('#viewer'),
                antialias: true,
                alpha: true
            });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.xr.enabled = true;

            // Controls
            controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;

            // Lights
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(2, 2, 5);
            scene.add(directionalLight);

            // Create reticle for AR
            reticle = new THREE.Mesh(
                new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),
                new THREE.MeshBasicMaterial()
            );
            reticle.matrixAutoUpdate = false;
            reticle.visible = false;
            scene.add(reticle);

            // Load the model
            const loader = new OBJLoader();
            const progressBar = document.querySelector('.progress-bar');
            
            loader.load(
                '/static/files/texture.obj',
                function (obj) {
                    model = obj;
                    // Center the model
                    const box = new THREE.Box3().setFromObject(model);
                    const center = box.getCenter(new THREE.Vector3());
                    model.position.sub(center);
                    
                    // Scale the model to fit the view
                    const size = box.getSize(new THREE.Vector3());
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const scale = 2 / maxDim;
                    model.scale.multiplyScalar(scale);
                    
                    scene.add(model);
                    document.querySelector('.loading').style.display = 'none';
                },
                function (xhr) {
                    const progress = (xhr.loaded / xhr.total * 100);
                    progressBar.style.width = progress + '%';
                },
                function (error) {
                    console.error('Error loading model:', error);
                    document.querySelector('.loading').textContent = 'Error loading model';
                }
            );

            // Setup AR
            const arBtn = document.getElementById('arBtn');
            
            // Check if AR is supported
            if ('xr' in navigator) {
                navigator.xr.isSessionSupported('immersive-ar').then((supported) => {
                    if (supported) {
                        arBtn.disabled = false;
                        arBtn.addEventListener('click', onARButtonClick);
                    } else {
                        arBtn.textContent = 'AR Not Supported';
                    }
                });
            }

            // Event listeners
            window.addEventListener('resize', onWindowResize, false);
            document.getElementById('wireframeBtn').addEventListener('click', toggleWireframe);
            document.getElementById('fullscreenBtn').addEventListener('click', toggleFullscreen);

            animate();
        }

        async function onARButtonClick() {
            if (renderer.xr.isPresenting) {
                renderer.xr.getSession().end();
            } else {
                try {
                    const session = await navigator.xr.requestSession('immersive-ar', {
                        requiredFeatures: ['hit-test']
                    });

                    session.addEventListener('end', () => {
                        document.querySelector('.ar-overlay').style.display = 'none';
                        scene.background = new THREE.Color(0x1a1a2e);
                        modelPlaced = false;
                    });

                    await renderer.xr.setSession(session);
                    
                    document.querySelector('.ar-overlay').style.display = 'block';
                    scene.background = null; // Make background transparent in AR
                    
                    // Reset model position and visibility
                    if (model) {
                        model.visible = false;
                    }
                    reticle.visible = false;
                    modelPlaced = false;

                    session.addEventListener('select', onSelect);
                } catch (error) {
                    console.error('Error starting AR session:', error);
                }
            }
        }

        function onSelect() {
            if (reticle.visible && !modelPlaced) {
                // Place the model at the reticle's position
                if (model) {
                    model.position.setFromMatrixPosition(reticle.matrix);
                    model.visible = true;
                    modelPlaced = true;
                    reticle.visible = false;
                    document.querySelector('.ar-overlay').style.display = 'none';
                }
            }
        }

        function animate() {
            renderer.setAnimationLoop(render);
        }

        function render(timestamp, frame) {
            if (frame) {
                const referenceSpace = renderer.xr.getReferenceSpace();
                const session = renderer.xr.getSession();

                if (session && !modelPlaced) {
                    if (!hitTestSourceRequested) {
                        session.requestReferenceSpace('viewer').then((referenceSpace) => {
                            session.requestHitTestSource({ space: referenceSpace }).then((source) => {
                                hitTestSource = source;
                            });
                        });
                        hitTestSourceRequested = true;
                    }

                    if (hitTestSource) {
                        const hitTestResults = frame.getHitTestResults(hitTestSource);
                        if (hitTestResults.length) {
                            const hit = hitTestResults[0];
                            const pose = hit.getPose(referenceSpace);
                            reticle.visible = true;
                            reticle.matrix.fromArray(pose.transform.matrix);
                        } else {
                            reticle.visible = false;
                        }
                    }
                }
            }

            controls.update();
            renderer.render(scene, camera);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function toggleWireframe() {
            if (model) {
                model.traverse((child) => {
                    if (child.isMesh) {
                        child.material.wireframe = !child.material.wireframe;
                    }
                });
            }
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
            } else {
                document.exitFullscreen();
            }
        }

        // Initialize the application
        init();
    </script>
</body>
</html>